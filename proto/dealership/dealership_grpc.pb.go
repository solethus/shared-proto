// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/dealership/dealership.proto

package dealership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DealershipService_GetDealerShipInfo_FullMethodName = "/dealership.DealershipService/GetDealerShipInfo"
	DealershipService_ListDealerships_FullMethodName   = "/dealership.DealershipService/ListDealerships"
	DealershipService_CreateReservation_FullMethodName = "/dealership.DealershipService/CreateReservation"
	DealershipService_GetReservation_FullMethodName    = "/dealership.DealershipService/GetReservation"
	DealershipService_CancelReservation_FullMethodName = "/dealership.DealershipService/CancelReservation"
	DealershipService_ListAvailableCars_FullMethodName = "/dealership.DealershipService/ListAvailableCars"
)

// DealershipServiceClient is the client API for DealershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealershipServiceClient interface {
	GetDealerShipInfo(ctx context.Context, in *GetDealershipInfoRequest, opts ...grpc.CallOption) (*DealershipInfo, error)
	ListDealerships(ctx context.Context, in *ListDealershipsRequest, opts ...grpc.CallOption) (*ListDealershipsResponse, error)
	CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*Reservation, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error)
	ListAvailableCars(ctx context.Context, in *ListAvailableCarsRequest, opts ...grpc.CallOption) (*ListAvailableCarsResponse, error)
}

type dealershipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDealershipServiceClient(cc grpc.ClientConnInterface) DealershipServiceClient {
	return &dealershipServiceClient{cc}
}

func (c *dealershipServiceClient) GetDealerShipInfo(ctx context.Context, in *GetDealershipInfoRequest, opts ...grpc.CallOption) (*DealershipInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DealershipInfo)
	err := c.cc.Invoke(ctx, DealershipService_GetDealerShipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealershipServiceClient) ListDealerships(ctx context.Context, in *ListDealershipsRequest, opts ...grpc.CallOption) (*ListDealershipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDealershipsResponse)
	err := c.cc.Invoke(ctx, DealershipService_ListDealerships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealershipServiceClient) CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*Reservation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reservation)
	err := c.cc.Invoke(ctx, DealershipService_CreateReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealershipServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reservation)
	err := c.cc.Invoke(ctx, DealershipService_GetReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealershipServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelReservationResponse)
	err := c.cc.Invoke(ctx, DealershipService_CancelReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealershipServiceClient) ListAvailableCars(ctx context.Context, in *ListAvailableCarsRequest, opts ...grpc.CallOption) (*ListAvailableCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableCarsResponse)
	err := c.cc.Invoke(ctx, DealershipService_ListAvailableCars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealershipServiceServer is the server API for DealershipService service.
// All implementations must embed UnimplementedDealershipServiceServer
// for forward compatibility.
type DealershipServiceServer interface {
	GetDealerShipInfo(context.Context, *GetDealershipInfoRequest) (*DealershipInfo, error)
	ListDealerships(context.Context, *ListDealershipsRequest) (*ListDealershipsResponse, error)
	CreateReservation(context.Context, *CreateReservationRequest) (*Reservation, error)
	GetReservation(context.Context, *GetReservationRequest) (*Reservation, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error)
	ListAvailableCars(context.Context, *ListAvailableCarsRequest) (*ListAvailableCarsResponse, error)
	mustEmbedUnimplementedDealershipServiceServer()
}

// UnimplementedDealershipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDealershipServiceServer struct{}

func (UnimplementedDealershipServiceServer) GetDealerShipInfo(context.Context, *GetDealershipInfoRequest) (*DealershipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealerShipInfo not implemented")
}
func (UnimplementedDealershipServiceServer) ListDealerships(context.Context, *ListDealershipsRequest) (*ListDealershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDealerships not implemented")
}
func (UnimplementedDealershipServiceServer) CreateReservation(context.Context, *CreateReservationRequest) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedDealershipServiceServer) GetReservation(context.Context, *GetReservationRequest) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}
func (UnimplementedDealershipServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedDealershipServiceServer) ListAvailableCars(context.Context, *ListAvailableCarsRequest) (*ListAvailableCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableCars not implemented")
}
func (UnimplementedDealershipServiceServer) mustEmbedUnimplementedDealershipServiceServer() {}
func (UnimplementedDealershipServiceServer) testEmbeddedByValue()                           {}

// UnsafeDealershipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealershipServiceServer will
// result in compilation errors.
type UnsafeDealershipServiceServer interface {
	mustEmbedUnimplementedDealershipServiceServer()
}

func RegisterDealershipServiceServer(s grpc.ServiceRegistrar, srv DealershipServiceServer) {
	// If the following call pancis, it indicates UnimplementedDealershipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DealershipService_ServiceDesc, srv)
}

func _DealershipService_GetDealerShipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealershipInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).GetDealerShipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_GetDealerShipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).GetDealerShipInfo(ctx, req.(*GetDealershipInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealershipService_ListDealerships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDealershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).ListDealerships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_ListDealerships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).ListDealerships(ctx, req.(*ListDealershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealershipService_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_CreateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).CreateReservation(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealershipService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_GetReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealershipService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealershipService_ListAvailableCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealershipServiceServer).ListAvailableCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealershipService_ListAvailableCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealershipServiceServer).ListAvailableCars(ctx, req.(*ListAvailableCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DealershipService_ServiceDesc is the grpc.ServiceDesc for DealershipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DealershipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dealership.DealershipService",
	HandlerType: (*DealershipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDealerShipInfo",
			Handler:    _DealershipService_GetDealerShipInfo_Handler,
		},
		{
			MethodName: "ListDealerships",
			Handler:    _DealershipService_ListDealerships_Handler,
		},
		{
			MethodName: "CreateReservation",
			Handler:    _DealershipService_CreateReservation_Handler,
		},
		{
			MethodName: "GetReservation",
			Handler:    _DealershipService_GetReservation_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _DealershipService_CancelReservation_Handler,
		},
		{
			MethodName: "ListAvailableCars",
			Handler:    _DealershipService_ListAvailableCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dealership/dealership.proto",
}
